{"ast":null,"code":"let axios = require('axios');\n\nlet Concepts = require('./Concepts');\n\nlet Regions = require('./Regions');\n\nlet {\n  API\n} = require('./constants');\n\nlet {\n  INPUTS_PATH\n} = API;\n/**\n * class representing an input\n * @class\n */\n\nclass Input {\n  constructor(_config, data) {\n    this.id = data.id;\n    this.createdAt = data.created_at || data.createdAt;\n    this.imageUrl = data.data.image.url;\n    this.concepts = new Concepts(_config, data.data.concepts);\n    this.regions = new Regions(_config, data.data.regions || []);\n    this.score = data.score;\n    this.metadata = data.data.metadata;\n\n    if (data.data.geo && data.data.geo['geo_point']) {\n      this.geo = {\n        geoPoint: data.data.geo['geo_point']\n      };\n    }\n\n    this.rawData = data;\n    this._config = _config;\n  }\n  /**\n   * Merge concepts to an input\n   * @param {object[]}         concepts    Object with keys explained below:\n   *   @param {object}           concepts[].concept\n   *     @param {string}           concepts[].concept.id        The concept id (required)\n   *     @param {boolean}          concepts[].concept.value     Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n   * @param {object}           metadata                      Object with key values to attach to the input (optional)\n   * @return {Promise(Input, error)} A Promise that is fulfilled with an instance of Input or rejected with an error\n   */\n\n\n  mergeConcepts(concepts, metadata) {\n    return this._update('merge', concepts, metadata);\n  }\n  /**\n   * Delete concept from an input\n   * @param {object[]}         concepts    Object with keys explained below:\n   *   @param {object}           concepts[].concept\n   *     @param {string}           concepts[].concept.id        The concept id (required)\n   *     @param {boolean}          concepts[].concept.value     Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n   * @param {object}           metadata                      Object with key values to attach to the input (optional)\n   * @return {Promise(Input, error)} A Promise that is fulfilled with an instance of Input or rejected with an error\n   */\n\n\n  deleteConcepts(concepts, metadata) {\n    return this._update('remove', concepts, metadata);\n  }\n  /**\n   * Overwrite inputs\n   * @param {object[]}         concepts                      Array of object with keys explained below:\n   *   @param {object}           concepts[].concept\n   *     @param {string}           concepts[].concept.id         The concept id (required)\n   *     @param {boolean}          concepts[].concept.value      Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n   * @param {object}           metadata                      Object with key values to attach to the input (optional)\n   * @return {Promise(Input, error)} A Promise that is fulfilled with an instance of Input or rejected with an error\n   */\n\n\n  overwriteConcepts(concepts, metadata) {\n    return this._update('overwrite', concepts, metadata);\n  }\n\n  _update(action) {\n    let concepts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let metadata = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let url = `${this._config.basePath}${INPUTS_PATH}`;\n    let inputData = {};\n\n    if (concepts.length) {\n      inputData.concepts = concepts;\n    }\n\n    if (metadata !== null) {\n      inputData.metadata = metadata;\n    }\n\n    let data = {\n      action,\n      inputs: [{\n        id: this.id,\n        data: inputData\n      }]\n    };\n    return wrapToken(this._config, headers => {\n      return new Promise((resolve, reject) => {\n        return axios.patch(url, data, {\n          headers\n        }).then(response => {\n          if (isSuccess(response)) {\n            resolve(new Input(response.data.input));\n          } else {\n            reject(response);\n          }\n        }, reject);\n      });\n    });\n  }\n\n}\n\n;\nmodule.exports = Input;","map":{"version":3,"sources":["/Users/ivica/Desktop/dev/face-rec/node_modules/clarifai/src/Input.js"],"names":["axios","require","Concepts","Regions","API","INPUTS_PATH","Input","constructor","_config","data","id","createdAt","created_at","imageUrl","image","url","concepts","regions","score","metadata","geo","geoPoint","rawData","mergeConcepts","_update","deleteConcepts","overwriteConcepts","action","basePath","inputData","length","inputs","wrapToken","headers","Promise","resolve","reject","patch","then","response","isSuccess","input","module","exports"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAnB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,YAAD,CAAtB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,WAAD,CAArB;;AACA,IAAI;AAACG,EAAAA;AAAD,IAAQH,OAAO,CAAC,aAAD,CAAnB;;AACA,IAAI;AAACI,EAAAA;AAAD,IAAgBD,GAApB;AAEA;AACA;AACA;AACA;;AACA,MAAME,KAAN,CAAY;AACVC,EAAAA,WAAW,CAACC,OAAD,EAAUC,IAAV,EAAgB;AACzB,SAAKC,EAAL,GAAUD,IAAI,CAACC,EAAf;AACA,SAAKC,SAAL,GAAiBF,IAAI,CAACG,UAAL,IAAmBH,IAAI,CAACE,SAAzC;AACA,SAAKE,QAAL,GAAgBJ,IAAI,CAACA,IAAL,CAAUK,KAAV,CAAgBC,GAAhC;AACA,SAAKC,QAAL,GAAgB,IAAId,QAAJ,CAAaM,OAAb,EAAsBC,IAAI,CAACA,IAAL,CAAUO,QAAhC,CAAhB;AACA,SAAKC,OAAL,GAAe,IAAId,OAAJ,CAAYK,OAAZ,EAAqBC,IAAI,CAACA,IAAL,CAAUQ,OAAV,IAAqB,EAA1C,CAAf;AACA,SAAKC,KAAL,GAAaT,IAAI,CAACS,KAAlB;AACA,SAAKC,QAAL,GAAgBV,IAAI,CAACA,IAAL,CAAUU,QAA1B;;AACA,QAAIV,IAAI,CAACA,IAAL,CAAUW,GAAV,IAAiBX,IAAI,CAACA,IAAL,CAAUW,GAAV,CAAc,WAAd,CAArB,EAAiD;AAC/C,WAAKA,GAAL,GAAW;AAACC,QAAAA,QAAQ,EAAEZ,IAAI,CAACA,IAAL,CAAUW,GAAV,CAAc,WAAd;AAAX,OAAX;AACD;;AACD,SAAKE,OAAL,GAAeb,IAAf;AACA,SAAKD,OAAL,GAAeA,OAAf;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEe,EAAAA,aAAa,CAACP,QAAD,EAAWG,QAAX,EAAqB;AAChC,WAAO,KAAKK,OAAL,CAAa,OAAb,EAAsBR,QAAtB,EAAgCG,QAAhC,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEM,EAAAA,cAAc,CAACT,QAAD,EAAWG,QAAX,EAAqB;AACjC,WAAO,KAAKK,OAAL,CAAa,QAAb,EAAuBR,QAAvB,EAAiCG,QAAjC,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEO,EAAAA,iBAAiB,CAACV,QAAD,EAAWG,QAAX,EAAqB;AACpC,WAAO,KAAKK,OAAL,CAAa,WAAb,EAA0BR,QAA1B,EAAoCG,QAApC,CAAP;AACD;;AAEDK,EAAAA,OAAO,CAACG,MAAD,EAAyC;AAAA,QAAhCX,QAAgC,uEAArB,EAAqB;AAAA,QAAjBG,QAAiB,uEAAN,IAAM;AAC9C,QAAIJ,GAAG,GAAI,GAAE,KAAKP,OAAL,CAAaoB,QAAS,GAAEvB,WAAY,EAAjD;AACA,QAAIwB,SAAS,GAAG,EAAhB;;AACA,QAAIb,QAAQ,CAACc,MAAb,EAAqB;AACnBD,MAAAA,SAAS,CAACb,QAAV,GAAqBA,QAArB;AACD;;AACD,QAAIG,QAAQ,KAAK,IAAjB,EAAuB;AACrBU,MAAAA,SAAS,CAACV,QAAV,GAAqBA,QAArB;AACD;;AACD,QAAIV,IAAI,GAAG;AACTkB,MAAAA,MADS;AAETI,MAAAA,MAAM,EAAE,CACN;AACErB,QAAAA,EAAE,EAAE,KAAKA,EADX;AAEED,QAAAA,IAAI,EAAEoB;AAFR,OADM;AAFC,KAAX;AASA,WAAOG,SAAS,CAAC,KAAKxB,OAAN,EAAgByB,OAAD,IAAa;AAC1C,aAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,eAAOpC,KAAK,CAACqC,KAAN,CAAYtB,GAAZ,EAAiBN,IAAjB,EAAuB;AAACwB,UAAAA;AAAD,SAAvB,EACJK,IADI,CACEC,QAAD,IAAc;AAClB,cAAIC,SAAS,CAACD,QAAD,CAAb,EAAyB;AACvBJ,YAAAA,OAAO,CAAC,IAAI7B,KAAJ,CAAUiC,QAAQ,CAAC9B,IAAT,CAAcgC,KAAxB,CAAD,CAAP;AACD,WAFD,MAEO;AACLL,YAAAA,MAAM,CAACG,QAAD,CAAN;AACD;AACF,SAPI,EAOFH,MAPE,CAAP;AAQD,OATM,CAAP;AAUD,KAXe,CAAhB;AAYD;;AArFS;;AAuFZ;AAEAM,MAAM,CAACC,OAAP,GAAiBrC,KAAjB","sourcesContent":["let axios = require('axios');\nlet Concepts = require('./Concepts');\nlet Regions = require('./Regions');\nlet {API} = require('./constants');\nlet {INPUTS_PATH} = API;\n\n/**\n * class representing an input\n * @class\n */\nclass Input {\n  constructor(_config, data) {\n    this.id = data.id;\n    this.createdAt = data.created_at || data.createdAt;\n    this.imageUrl = data.data.image.url;\n    this.concepts = new Concepts(_config, data.data.concepts);\n    this.regions = new Regions(_config, data.data.regions || []);\n    this.score = data.score;\n    this.metadata = data.data.metadata;\n    if (data.data.geo && data.data.geo['geo_point']) {\n      this.geo = {geoPoint: data.data.geo['geo_point']};\n    }\n    this.rawData = data;\n    this._config = _config;\n  }\n\n  /**\n   * Merge concepts to an input\n   * @param {object[]}         concepts    Object with keys explained below:\n   *   @param {object}           concepts[].concept\n   *     @param {string}           concepts[].concept.id        The concept id (required)\n   *     @param {boolean}          concepts[].concept.value     Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n   * @param {object}           metadata                      Object with key values to attach to the input (optional)\n   * @return {Promise(Input, error)} A Promise that is fulfilled with an instance of Input or rejected with an error\n   */\n  mergeConcepts(concepts, metadata) {\n    return this._update('merge', concepts, metadata);\n  }\n\n  /**\n   * Delete concept from an input\n   * @param {object[]}         concepts    Object with keys explained below:\n   *   @param {object}           concepts[].concept\n   *     @param {string}           concepts[].concept.id        The concept id (required)\n   *     @param {boolean}          concepts[].concept.value     Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n   * @param {object}           metadata                      Object with key values to attach to the input (optional)\n   * @return {Promise(Input, error)} A Promise that is fulfilled with an instance of Input or rejected with an error\n   */\n  deleteConcepts(concepts, metadata) {\n    return this._update('remove', concepts, metadata);\n  }\n\n  /**\n   * Overwrite inputs\n   * @param {object[]}         concepts                      Array of object with keys explained below:\n   *   @param {object}           concepts[].concept\n   *     @param {string}           concepts[].concept.id         The concept id (required)\n   *     @param {boolean}          concepts[].concept.value      Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n   * @param {object}           metadata                      Object with key values to attach to the input (optional)\n   * @return {Promise(Input, error)} A Promise that is fulfilled with an instance of Input or rejected with an error\n   */\n  overwriteConcepts(concepts, metadata) {\n    return this._update('overwrite', concepts, metadata);\n  }\n\n  _update(action, concepts = [], metadata = null) {\n    let url = `${this._config.basePath}${INPUTS_PATH}`;\n    let inputData = {};\n    if (concepts.length) {\n      inputData.concepts = concepts;\n    }\n    if (metadata !== null) {\n      inputData.metadata = metadata;\n    }\n    let data = {\n      action,\n      inputs: [\n        {\n          id: this.id,\n          data: inputData\n        }\n      ]\n    };\n    return wrapToken(this._config, (headers) => {\n      return new Promise((resolve, reject) => {\n        return axios.patch(url, data, {headers})\n          .then((response) => {\n            if (isSuccess(response)) {\n              resolve(new Input(response.data.input));\n            } else {\n              reject(response);\n            }\n          }, reject);\n      });\n    });\n  }\n}\n;\n\nmodule.exports = Input;\n"]},"metadata":{},"sourceType":"script"}