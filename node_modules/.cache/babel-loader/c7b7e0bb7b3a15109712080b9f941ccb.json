{"ast":null,"code":"const MAX_BATCH_SIZE = 128;\nconst GEO_LIMIT_TYPES = ['withinMiles', 'withinKilometers', 'withinRadians', 'withinDegrees'];\nconst SYNC_TIMEOUT = 360000; // 6 minutes\n\nconst MODEL_QUEUED_FOR_TRAINING = '21103';\nconst MODEL_TRAINING = '21101';\nconst POLLTIME = 2000;\nmodule.exports = {\n  API: {\n    TOKEN_PATH: '/token',\n    MODELS_PATH: '/models',\n    MODEL_PATH: '/models/$0',\n    MODEL_VERSIONS_PATH: '/models/$0/versions',\n    MODEL_VERSION_PATH: '/models/$0/versions/$1',\n    MODEL_PATCH_PATH: '/models/$0/output_info/data/concepts',\n    MODEL_OUTPUT_PATH: '/models/$0/output_info',\n    MODEL_VERSION_OUTPUT_PATH: '/models/$0/versions/$1/output_info',\n    MODEL_SEARCH_PATH: '/models/searches',\n    MODEL_FEEDBACK_PATH: '/models/$0/feedback',\n    MODEL_VERSION_FEEDBACK_PATH: '/models/$0/versions/$1/feedback',\n    PREDICT_PATH: '/models/$0/outputs',\n    VERSION_PREDICT_PATH: '/models/$0/versions/$1/outputs',\n    CONCEPTS_PATH: '/concepts',\n    CONCEPT_PATH: '/concepts/$0',\n    CONCEPT_SEARCH_PATH: '/concepts/searches',\n    MODEL_INPUTS_PATH: '/models/$0/inputs',\n    MODEL_VERSION_INPUTS_PATH: '/models/$0/versions/$1/inputs',\n    MODEL_VERSION_METRICS_PATH: '/models/$0/versions/$1/metrics',\n    INPUTS_PATH: '/inputs',\n    INPUT_PATH: '/inputs/$0',\n    INPUTS_STATUS_PATH: '/inputs/status',\n    SEARCH_PATH: '/searches',\n    SEARCH_FEEDBACK_PATH: '/searches/feedback',\n    WORKFLOWS_PATH: '/workflows',\n    WORKFLOW_PATH: '/workflows/$0',\n    WORKFLOW_RESULTS_PATH: '/workflows/$0/results'\n  },\n  ERRORS: {\n    paramsRequired: param => {\n      let paramList = Array.isArray(param) ? param : [param];\n      return new Error(`The following ${paramList.length > 1 ? 'params are' : 'param is'} required: ${paramList.join(', ')}`);\n    },\n    MAX_INPUTS: new Error(`Number of inputs passed exceeded max of ${MAX_BATCH_SIZE}`),\n    INVALID_GEOLIMIT_TYPE: new Error(`Incorrect geo_limit type. Value must be any of the following: ${GEO_LIMIT_TYPES.join(', ')}`),\n    INVALID_DELETE_ARGS: new Error(`Wrong arguments passed. You can only delete all models (provide no arguments), delete select models (provide list of ids),\n    delete a single model (providing a single id) or delete a model version (provide a single id and version id)`)\n  },\n  STATUS: {\n    MODEL_QUEUED_FOR_TRAINING,\n    MODEL_TRAINING\n  },\n  // var replacement must be given in order\n  replaceVars: function (path) {\n    let vars = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let newPath = path;\n    vars.forEach((val, index) => {\n      if (index === 0) {\n        val = encodeURIComponent(val);\n      }\n\n      newPath = newPath.replace(new RegExp(`\\\\$${index}`, 'g'), val);\n    });\n    return newPath;\n  },\n  getBasePath: function () {\n    let apiEndpoint = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'https://api.clarifai.com';\n    let userId = arguments.length > 1 ? arguments[1] : undefined;\n    let appId = arguments.length > 2 ? arguments[2] : undefined;\n\n    if (!userId || !appId) {\n      return `${apiEndpoint}/v2`;\n    }\n\n    return `${apiEndpoint}/v2/users/${userId}/apps/${appId}`;\n  },\n  GEO_LIMIT_TYPES,\n  MAX_BATCH_SIZE,\n  SYNC_TIMEOUT,\n  POLLTIME\n};","map":{"version":3,"sources":["/Users/ivica/Desktop/dev/face-rec/node_modules/clarifai/src/constants.js"],"names":["MAX_BATCH_SIZE","GEO_LIMIT_TYPES","SYNC_TIMEOUT","MODEL_QUEUED_FOR_TRAINING","MODEL_TRAINING","POLLTIME","module","exports","API","TOKEN_PATH","MODELS_PATH","MODEL_PATH","MODEL_VERSIONS_PATH","MODEL_VERSION_PATH","MODEL_PATCH_PATH","MODEL_OUTPUT_PATH","MODEL_VERSION_OUTPUT_PATH","MODEL_SEARCH_PATH","MODEL_FEEDBACK_PATH","MODEL_VERSION_FEEDBACK_PATH","PREDICT_PATH","VERSION_PREDICT_PATH","CONCEPTS_PATH","CONCEPT_PATH","CONCEPT_SEARCH_PATH","MODEL_INPUTS_PATH","MODEL_VERSION_INPUTS_PATH","MODEL_VERSION_METRICS_PATH","INPUTS_PATH","INPUT_PATH","INPUTS_STATUS_PATH","SEARCH_PATH","SEARCH_FEEDBACK_PATH","WORKFLOWS_PATH","WORKFLOW_PATH","WORKFLOW_RESULTS_PATH","ERRORS","paramsRequired","param","paramList","Array","isArray","Error","length","join","MAX_INPUTS","INVALID_GEOLIMIT_TYPE","INVALID_DELETE_ARGS","STATUS","replaceVars","path","vars","newPath","forEach","val","index","encodeURIComponent","replace","RegExp","getBasePath","apiEndpoint","userId","appId"],"mappings":"AAAA,MAAMA,cAAc,GAAG,GAAvB;AACA,MAAMC,eAAe,GAAG,CAAC,aAAD,EAAgB,kBAAhB,EAAoC,eAApC,EAAqD,eAArD,CAAxB;AACA,MAAMC,YAAY,GAAG,MAArB,C,CAA6B;;AAC7B,MAAMC,yBAAyB,GAAG,OAAlC;AACA,MAAMC,cAAc,GAAG,OAAvB;AACA,MAAMC,QAAQ,GAAG,IAAjB;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,GAAG,EAAE;AACHC,IAAAA,UAAU,EAAE,QADT;AAEHC,IAAAA,WAAW,EAAE,SAFV;AAGHC,IAAAA,UAAU,EAAE,YAHT;AAIHC,IAAAA,mBAAmB,EAAE,qBAJlB;AAKHC,IAAAA,kBAAkB,EAAE,wBALjB;AAMHC,IAAAA,gBAAgB,EAAE,sCANf;AAOHC,IAAAA,iBAAiB,EAAE,wBAPhB;AAQHC,IAAAA,yBAAyB,EAAE,oCARxB;AASHC,IAAAA,iBAAiB,EAAE,kBAThB;AAUHC,IAAAA,mBAAmB,EAAE,qBAVlB;AAWHC,IAAAA,2BAA2B,EAAE,iCAX1B;AAYHC,IAAAA,YAAY,EAAE,oBAZX;AAaHC,IAAAA,oBAAoB,EAAE,gCAbnB;AAcHC,IAAAA,aAAa,EAAE,WAdZ;AAeHC,IAAAA,YAAY,EAAE,cAfX;AAgBHC,IAAAA,mBAAmB,EAAE,oBAhBlB;AAiBHC,IAAAA,iBAAiB,EAAE,mBAjBhB;AAkBHC,IAAAA,yBAAyB,EAAE,+BAlBxB;AAmBHC,IAAAA,0BAA0B,EAAE,gCAnBzB;AAoBHC,IAAAA,WAAW,EAAE,SApBV;AAqBHC,IAAAA,UAAU,EAAE,YArBT;AAsBHC,IAAAA,kBAAkB,EAAE,gBAtBjB;AAuBHC,IAAAA,WAAW,EAAE,WAvBV;AAwBHC,IAAAA,oBAAoB,EAAE,oBAxBnB;AAyBHC,IAAAA,cAAc,EAAE,YAzBb;AA0BHC,IAAAA,aAAa,EAAE,eA1BZ;AA2BHC,IAAAA,qBAAqB,EAAE;AA3BpB,GADU;AA8BfC,EAAAA,MAAM,EAAE;AACNC,IAAAA,cAAc,EAAGC,KAAD,IAAW;AACzB,UAAIC,SAAS,GAAGC,KAAK,CAACC,OAAN,CAAcH,KAAd,IAAuBA,KAAvB,GAA+B,CAACA,KAAD,CAA/C;AACA,aAAO,IAAII,KAAJ,CAAW,iBAAgBH,SAAS,CAACI,MAAV,GAAmB,CAAnB,GAAuB,YAAvB,GAAsC,UAAW,cAAaJ,SAAS,CAACK,IAAV,CAAe,IAAf,CAAqB,EAA9G,CAAP;AACD,KAJK;AAKNC,IAAAA,UAAU,EAAE,IAAIH,KAAJ,CAAW,2CAA0C1C,cAAe,EAApE,CALN;AAMN8C,IAAAA,qBAAqB,EAAE,IAAIJ,KAAJ,CAAW,iEAAgEzC,eAAe,CAAC2C,IAAhB,CAAqB,IAArB,CAA2B,EAAtG,CANjB;AAONG,IAAAA,mBAAmB,EAAE,IAAIL,KAAJ,CAAW;AACpC,iHADyB;AAPf,GA9BO;AAwCfM,EAAAA,MAAM,EAAE;AACN7C,IAAAA,yBADM;AAENC,IAAAA;AAFM,GAxCO;AA4Cf;AACA6C,EAAAA,WAAW,EAAE,UAACC,IAAD,EAAqB;AAAA,QAAdC,IAAc,uEAAP,EAAO;AAChC,QAAIC,OAAO,GAAGF,IAAd;AACAC,IAAAA,IAAI,CAACE,OAAL,CAAa,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAC3B,UAAIA,KAAK,KAAK,CAAd,EAAiB;AACfD,QAAAA,GAAG,GAAGE,kBAAkB,CAACF,GAAD,CAAxB;AACD;;AACDF,MAAAA,OAAO,GAAGA,OAAO,CAACK,OAAR,CAAgB,IAAIC,MAAJ,CAAY,MAAKH,KAAM,EAAvB,EAA0B,GAA1B,CAAhB,EAAgDD,GAAhD,CAAV;AACD,KALD;AAMA,WAAOF,OAAP;AACD,GAtDc;AAuDfO,EAAAA,WAAW,EAAE,YAA6D;AAAA,QAA5DC,WAA4D,uEAA9C,0BAA8C;AAAA,QAAlBC,MAAkB;AAAA,QAAVC,KAAU;;AACxE,QAAG,CAACD,MAAD,IAAW,CAACC,KAAf,EAAsB;AACpB,aAAQ,GAAEF,WAAY,KAAtB;AACD;;AACD,WAAQ,GAAEA,WAAY,aAAYC,MAAO,SAAQC,KAAM,EAAvD;AACD,GA5Dc;AA6Df7D,EAAAA,eA7De;AA8DfD,EAAAA,cA9De;AA+DfE,EAAAA,YA/De;AAgEfG,EAAAA;AAhEe,CAAjB","sourcesContent":["const MAX_BATCH_SIZE = 128;\nconst GEO_LIMIT_TYPES = ['withinMiles', 'withinKilometers', 'withinRadians', 'withinDegrees'];\nconst SYNC_TIMEOUT = 360000; // 6 minutes\nconst MODEL_QUEUED_FOR_TRAINING = '21103';\nconst MODEL_TRAINING = '21101';\nconst POLLTIME = 2000;\n\nmodule.exports = {\n  API: {\n    TOKEN_PATH: '/token',\n    MODELS_PATH: '/models',\n    MODEL_PATH: '/models/$0',\n    MODEL_VERSIONS_PATH: '/models/$0/versions',\n    MODEL_VERSION_PATH: '/models/$0/versions/$1',\n    MODEL_PATCH_PATH: '/models/$0/output_info/data/concepts',\n    MODEL_OUTPUT_PATH: '/models/$0/output_info',\n    MODEL_VERSION_OUTPUT_PATH: '/models/$0/versions/$1/output_info',\n    MODEL_SEARCH_PATH: '/models/searches',\n    MODEL_FEEDBACK_PATH: '/models/$0/feedback',\n    MODEL_VERSION_FEEDBACK_PATH: '/models/$0/versions/$1/feedback',\n    PREDICT_PATH: '/models/$0/outputs',\n    VERSION_PREDICT_PATH: '/models/$0/versions/$1/outputs',\n    CONCEPTS_PATH: '/concepts',\n    CONCEPT_PATH: '/concepts/$0',\n    CONCEPT_SEARCH_PATH: '/concepts/searches',\n    MODEL_INPUTS_PATH: '/models/$0/inputs',\n    MODEL_VERSION_INPUTS_PATH: '/models/$0/versions/$1/inputs',\n    MODEL_VERSION_METRICS_PATH: '/models/$0/versions/$1/metrics',\n    INPUTS_PATH: '/inputs',\n    INPUT_PATH: '/inputs/$0',\n    INPUTS_STATUS_PATH: '/inputs/status',\n    SEARCH_PATH: '/searches',\n    SEARCH_FEEDBACK_PATH: '/searches/feedback',\n    WORKFLOWS_PATH: '/workflows',\n    WORKFLOW_PATH: '/workflows/$0',\n    WORKFLOW_RESULTS_PATH: '/workflows/$0/results'\n  },\n  ERRORS: {\n    paramsRequired: (param) => {\n      let paramList = Array.isArray(param) ? param : [param];\n      return new Error(`The following ${paramList.length > 1 ? 'params are' : 'param is'} required: ${paramList.join(', ')}`);\n    },\n    MAX_INPUTS: new Error(`Number of inputs passed exceeded max of ${MAX_BATCH_SIZE}`),\n    INVALID_GEOLIMIT_TYPE: new Error(`Incorrect geo_limit type. Value must be any of the following: ${GEO_LIMIT_TYPES.join(', ')}`),\n    INVALID_DELETE_ARGS: new Error(`Wrong arguments passed. You can only delete all models (provide no arguments), delete select models (provide list of ids),\n    delete a single model (providing a single id) or delete a model version (provide a single id and version id)`)\n  },\n  STATUS: {\n    MODEL_QUEUED_FOR_TRAINING,\n    MODEL_TRAINING\n  },\n  // var replacement must be given in order\n  replaceVars: (path, vars = []) => {\n    let newPath = path;\n    vars.forEach((val, index) => {\n      if (index === 0) {\n        val = encodeURIComponent(val);\n      }\n      newPath = newPath.replace(new RegExp(`\\\\$${index}`, 'g'), val);\n    });\n    return newPath;\n  },\n  getBasePath: (apiEndpoint = 'https://api.clarifai.com', userId, appId) => {\n    if(!userId || !appId) {\n      return `${apiEndpoint}/v2`;\n    }\n    return `${apiEndpoint}/v2/users/${userId}/apps/${appId}`;\n  },\n  GEO_LIMIT_TYPES,\n  MAX_BATCH_SIZE,\n  SYNC_TIMEOUT,\n  POLLTIME\n};\n"]},"metadata":{},"sourceType":"script"}