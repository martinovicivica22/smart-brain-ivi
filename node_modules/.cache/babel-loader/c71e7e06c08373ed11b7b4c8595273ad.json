{"ast":null,"code":"let axios = require('axios');\n\nlet {\n  wrapToken\n} = require('../utils');\n\nlet {\n  isSuccess,\n  clone\n} = require('../helpers');\n\nlet BASE_URL = 'https://api.clarifai-moderation.com';\n\nclass Moderation {\n  constructor(_config) {\n    this._config = _config;\n  }\n\n  predict(modelID, imageURL) {\n    return wrapToken(this._config, headers => {\n      let url = `${BASE_URL}/v2/models/${modelID}/outputs`;\n      let params = {\n        inputs: [{\n          data: {\n            image: {\n              url: imageURL\n            }\n          }\n        }]\n      };\n      return new Promise((resolve, reject) => {\n        return axios.post(url, params, {\n          headers\n        }).then(response => {\n          if (isSuccess(response)) {\n            let data = clone(response.data);\n            resolve(data);\n          } else {\n            reject(response);\n          }\n        }, reject);\n      });\n    });\n  }\n\n  getModerationStatus(imageID) {\n    return wrapToken(this._config, headers => {\n      let url = `${BASE_URL}/v2/inputs/${imageID}/outputs`;\n      return new Promise((resolve, reject) => {\n        return axios.get(url, {\n          headers\n        }).then(response => {\n          let data = clone(response.data);\n          resolve(data);\n        }, reject);\n      });\n    });\n  }\n\n}\n\nmodule.exports = Moderation;","map":{"version":3,"sources":["/Users/ivica/Desktop/dev/face-rec/node_modules/clarifai/src/solutions/Moderation.js"],"names":["axios","require","wrapToken","isSuccess","clone","BASE_URL","Moderation","constructor","_config","predict","modelID","imageURL","headers","url","params","inputs","data","image","Promise","resolve","reject","post","then","response","getModerationStatus","imageID","get","module","exports"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAnB;;AACA,IAAI;AAACC,EAAAA;AAAD,IAAcD,OAAO,CAAC,UAAD,CAAzB;;AACA,IAAI;AAACE,EAAAA,SAAD;AAAYC,EAAAA;AAAZ,IAAqBH,OAAO,CAAC,YAAD,CAAhC;;AAEA,IAAII,QAAQ,GAAG,qCAAf;;AAEA,MAAMC,UAAN,CAAiB;AAEfC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,SAAKA,OAAL,GAAeA,OAAf;AAED;;AAEDC,EAAAA,OAAO,CAACC,OAAD,EAAUC,QAAV,EAAoB;AACzB,WAAOT,SAAS,CAAC,KAAKM,OAAN,EAAgBI,OAAD,IAAa;AAC1C,UAAIC,GAAG,GAAI,GAAER,QAAS,cAAaK,OAAQ,UAA3C;AACA,UAAII,MAAM,GAAG;AACXC,QAAAA,MAAM,EAAE,CACN;AACEC,UAAAA,IAAI,EAAE;AACJC,YAAAA,KAAK,EAAE;AACLJ,cAAAA,GAAG,EAAEF;AADA;AADH;AADR,SADM;AADG,OAAb;AAYA,aAAO,IAAIO,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,eAAOpB,KAAK,CAACqB,IAAN,CAAWR,GAAX,EAAgBC,MAAhB,EAAwB;AAACF,UAAAA;AAAD,SAAxB,EAAmCU,IAAnC,CAAyCC,QAAD,IAAc;AAC3D,cAAIpB,SAAS,CAACoB,QAAD,CAAb,EAAyB;AACvB,gBAAIP,IAAI,GAAGZ,KAAK,CAACmB,QAAQ,CAACP,IAAV,CAAhB;AACAG,YAAAA,OAAO,CAACH,IAAD,CAAP;AACD,WAHD,MAGO;AACLI,YAAAA,MAAM,CAACG,QAAD,CAAN;AACD;AACF,SAPM,EAOJH,MAPI,CAAP;AAQD,OATM,CAAP;AAUD,KAxBe,CAAhB;AAyBD;;AAEDI,EAAAA,mBAAmB,CAACC,OAAD,EAAU;AAC3B,WAAOvB,SAAS,CAAC,KAAKM,OAAN,EAAgBI,OAAD,IAAa;AAC1C,UAAIC,GAAG,GAAI,GAAER,QAAS,cAAaoB,OAAQ,UAA3C;AACA,aAAO,IAAIP,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,eAAOpB,KAAK,CAAC0B,GAAN,CAAUb,GAAV,EAAe;AAACD,UAAAA;AAAD,SAAf,EAA0BU,IAA1B,CAAgCC,QAAD,IAAc;AAClD,cAAIP,IAAI,GAAGZ,KAAK,CAACmB,QAAQ,CAACP,IAAV,CAAhB;AACAG,UAAAA,OAAO,CAACH,IAAD,CAAP;AACD,SAHM,EAGJI,MAHI,CAAP;AAKD,OANM,CAAP;AAOD,KATe,CAAhB;AAUD;;AA9Cc;;AAiDjBO,MAAM,CAACC,OAAP,GAAiBtB,UAAjB","sourcesContent":["let axios = require('axios');\nlet {wrapToken} = require('../utils');\nlet {isSuccess, clone} = require('../helpers');\n\nlet BASE_URL = 'https://api.clarifai-moderation.com';\n\nclass Moderation {\n\n  constructor(_config) {\n    this._config = _config;\n\n  }\n\n  predict(modelID, imageURL) {\n    return wrapToken(this._config, (headers) => {\n      let url = `${BASE_URL}/v2/models/${modelID}/outputs`;\n      let params = {\n        inputs: [\n          {\n            data: {\n              image: {\n                url: imageURL\n              }\n            }\n          }\n        ]\n      };\n\n      return new Promise((resolve, reject) => {\n        return axios.post(url, params, {headers}).then((response) => {\n          if (isSuccess(response)) {\n            let data = clone(response.data);\n            resolve(data);\n          } else {\n            reject(response);\n          }\n        }, reject);\n      });\n    });\n  }\n\n  getModerationStatus(imageID) {\n    return wrapToken(this._config, (headers) => {\n      let url = `${BASE_URL}/v2/inputs/${imageID}/outputs`;\n      return new Promise((resolve, reject) => {\n        return axios.get(url, {headers}).then((response) => {\n          let data = clone(response.data);\n          resolve(data);\n        }, reject);\n\n      });\n    });\n  }\n}\n\nmodule.exports = Moderation;\n"]},"metadata":{},"sourceType":"script"}