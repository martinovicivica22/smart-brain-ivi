{"ast":null,"code":"import { formatObjectForSnakeCase } from './utils';\n\nlet axios = require('axios');\n\nlet {\n  API,\n  replaceVars\n} = require('./constants');\n\nlet {\n  WORKFLOWS_PATH,\n  WORKFLOW_PATH,\n  WORKFLOW_RESULTS_PATH\n} = API;\n\nlet {\n  wrapToken,\n  formatInput\n} = require('./utils');\n\nlet {\n  checkType\n} = require('./helpers');\n/**\n * class representing a workflow\n * @class\n */\n\n\nclass Workflow {\n  constructor(_config) {\n    let rawData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    this._config = _config;\n    this.rawData = rawData;\n    this.id = rawData.id;\n    this.createdAt = rawData.created_at || rawData.createdAt;\n    this.appId = rawData.app_id || rawData.appId;\n  }\n  /**\n   * @deprecated\n   */\n\n\n  create(workflowId, config) {\n    const url = `${this._config.basePath}${WORKFLOWS_PATH}`;\n    const modelId = config.modelId;\n    const modelVersionId = config.modelVersionId;\n    const body = {\n      workflows: [{\n        id: workflowId,\n        nodes: [{\n          id: 'concepts',\n          model: {\n            id: modelId,\n            model_version: {\n              id: modelVersionId\n            }\n          }\n        }]\n      }]\n    };\n    return wrapToken(this._config, headers => {\n      return new Promise((resolve, reject) => {\n        axios.post(url, body, {\n          headers\n        }).then(response => {\n          const workflowId = response.data.workflows[0].id;\n          resolve(workflowId);\n        }, reject);\n      });\n    });\n  }\n  /**\n   * @deprecated\n   */\n\n\n  delete(workflowId, config) {\n    const url = `${this._config.basePath}${replaceVars(WORKFLOW_PATH, [workflowId])}`;\n    return wrapToken(this._config, headers => {\n      return new Promise((resolve, reject) => {\n        axios.delete(url, {\n          headers\n        }).then(response => {\n          const data = response.data;\n          resolve(data);\n        }, reject);\n      });\n    });\n  }\n  /**\n   * Returns workflow output according to inputs\n   * @param {string}                   workflowId    Workflow id\n   * @param {object[]|object|string}   inputs    An array of objects/object/string pointing to an image resource. A string can either be a url or base64 image bytes. Object keys explained below:\n   *    @param {object}                  inputs[].image     Object with keys explained below:\n   *       @param {string}                 inputs[].image.(url|base64)  Can be a publicly accessibly url or base64 string representing image bytes (required)\n   * @param {object} config An object with keys explained below.\n   *   @param {float} config.minValue The minimum confidence threshold that a result must meet. From 0.0 to 1.0\n   *   @param {number} config.maxConcepts The maximum number of concepts to return\n   */\n\n\n  predict(workflowId, inputs) {\n    let config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const url = `${this._config.basePath}${replaceVars(WORKFLOW_RESULTS_PATH, [workflowId])}`;\n\n    if (checkType(/(Object|String)/, inputs)) {\n      inputs = [inputs];\n    }\n\n    return wrapToken(this._config, headers => {\n      const params = {\n        inputs: inputs.map(formatInput)\n      };\n\n      if (config && Object.getOwnPropertyNames(config).length > 0) {\n        params['output_config'] = formatObjectForSnakeCase(config);\n      }\n\n      return new Promise((resolve, reject) => {\n        axios.post(url, params, {\n          headers\n        }).then(response => {\n          const data = response.data;\n          resolve(data);\n        }, reject);\n      });\n    });\n  }\n\n}\n\nmodule.exports = Workflow;","map":{"version":3,"sources":["/Users/ivica/Desktop/dev/face-rec/node_modules/clarifai/src/Workflow.js"],"names":["formatObjectForSnakeCase","axios","require","API","replaceVars","WORKFLOWS_PATH","WORKFLOW_PATH","WORKFLOW_RESULTS_PATH","wrapToken","formatInput","checkType","Workflow","constructor","_config","rawData","id","createdAt","created_at","appId","app_id","create","workflowId","config","url","basePath","modelId","modelVersionId","body","workflows","nodes","model","model_version","headers","Promise","resolve","reject","post","then","response","data","delete","predict","inputs","params","map","Object","getOwnPropertyNames","length","module","exports"],"mappings":"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","sourcesContent":["import {formatObjectForSnakeCase} from './utils';\n\nlet axios = require('axios');\nlet {API, replaceVars} = require('./constants');\nlet {WORKFLOWS_PATH, WORKFLOW_PATH, WORKFLOW_RESULTS_PATH} = API;\nlet {wrapToken, formatInput} = require('./utils');\nlet {checkType} = require('./helpers');\n\n/**\n * class representing a workflow\n * @class\n */\nclass Workflow {\n  constructor(_config, rawData=[]) {\n    this._config = _config;\n    this.rawData = rawData;\n    this.id = rawData.id;\n    this.createdAt = rawData.created_at || rawData.createdAt;\n    this.appId = rawData.app_id || rawData.appId;\n  }\n\n  /**\n   * @deprecated\n   */\n  create(workflowId, config) {\n    const url = `${this._config.basePath}${WORKFLOWS_PATH}`;\n    const modelId = config.modelId;\n    const modelVersionId = config.modelVersionId;\n    const body = {\n      workflows: [{\n        id: workflowId,\n        nodes: [{\n          id: 'concepts',\n          model: {\n            id: modelId,\n            model_version: {\n              id: modelVersionId\n            }\n          }\n        }]\n      }]\n    };\n\n    return wrapToken(this._config, (headers) => {\n      return new Promise((resolve, reject) => {\n        axios.post(url, body, {\n          headers\n        }).then(response => {\n          const workflowId = response.data.workflows[0].id;\n          resolve(workflowId);\n        }, reject);\n      });\n    });\n  }\n\n  /**\n   * @deprecated\n   */\n  delete(workflowId, config) {\n    const url = `${this._config.basePath}${replaceVars(WORKFLOW_PATH, [workflowId])}`;\n    return wrapToken(this._config, (headers) => {\n      return new Promise((resolve, reject) => {\n        axios.delete(url, {\n          headers\n        }).then(response => {\n          const data = response.data;\n          resolve(data);\n        }, reject);\n      });\n    });\n  }\n\n  /**\n   * Returns workflow output according to inputs\n   * @param {string}                   workflowId    Workflow id\n   * @param {object[]|object|string}   inputs    An array of objects/object/string pointing to an image resource. A string can either be a url or base64 image bytes. Object keys explained below:\n   *    @param {object}                  inputs[].image     Object with keys explained below:\n   *       @param {string}                 inputs[].image.(url|base64)  Can be a publicly accessibly url or base64 string representing image bytes (required)\n   * @param {object} config An object with keys explained below.\n   *   @param {float} config.minValue The minimum confidence threshold that a result must meet. From 0.0 to 1.0\n   *   @param {number} config.maxConcepts The maximum number of concepts to return\n   */\n  predict(workflowId, inputs, config = {}) {\n    const url = `${this._config.basePath}${replaceVars(WORKFLOW_RESULTS_PATH, [workflowId])}`;\n    if (checkType(/(Object|String)/, inputs)) {\n      inputs = [inputs];\n    }\n    return wrapToken(this._config, (headers) => {\n      const params = {\n        inputs: inputs.map(formatInput)\n      };\n      if (config && Object.getOwnPropertyNames(config).length > 0) {\n        params['output_config'] = formatObjectForSnakeCase(config);\n      }\n      return new Promise((resolve, reject) => {\n        axios.post(url, params, {\n          headers\n        }).then((response) => {\n          const data = response.data;\n          resolve(data);\n        }, reject);\n      });\n    });\n  }\n}\n\nmodule.exports = Workflow;\n"]},"metadata":{},"sourceType":"module"}