{"ast":null,"code":"let axios = require('axios');\n\nlet Workflow = require('./Workflow');\n\nlet {\n  API,\n  replaceVars\n} = require('./constants');\n\nlet {\n  WORKFLOWS_PATH,\n  WORKFLOW_PATH\n} = API;\n\nlet {\n  wrapToken\n} = require('./utils');\n\nlet {\n  isSuccess\n} = require('./helpers');\n/**\n * class representing a collection of workflows\n * @class\n */\n\n\nclass Workflows {\n  constructor(_config) {\n    let rawData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    this._config = _config;\n    this.rawData = rawData;\n    rawData.forEach((workflowData, index) => {\n      this[index] = new Workflow(this._config, workflowData);\n    });\n    this.length = rawData.length;\n  }\n  /**\n   * Get all workflows in app\n   * @param {Object}    options  Object with keys explained below: (optional)\n   *   @param {Number}    options.page  The page number (optional, default: 1)\n   *   @param {Number}    options.perPage  Number of images to return per page (optional, default: 20)\n   * @return {Promise(Workflows, error)} A Promise that is fulfilled with an instance of Workflows or rejected with an error\n   */\n\n\n  list() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      page: 1,\n      perPage: 20\n    };\n    let url = `${this._config.basePath}${WORKFLOWS_PATH}`;\n    return wrapToken(this._config, headers => {\n      return new Promise((resolve, reject) => {\n        axios.get(url, {\n          headers,\n          params: {\n            page: options.page,\n            per_page: options.perPage\n          }\n        }).then(response => {\n          if (isSuccess(response)) {\n            resolve(new Workflows(this._config, response.data.workflows));\n          } else {\n            reject(response);\n          }\n        }, reject);\n      });\n    });\n  }\n\n  create(workflowId, config) {\n    const url = `${this._config.basePath}${WORKFLOWS_PATH}`;\n    const modelId = config.modelId;\n    const modelVersionId = config.modelVersionId;\n    const body = {\n      workflows: [{\n        id: workflowId,\n        nodes: [{\n          id: 'concepts',\n          model: {\n            id: modelId,\n            model_version: {\n              id: modelVersionId\n            }\n          }\n        }]\n      }]\n    };\n    return wrapToken(this._config, headers => {\n      return new Promise((resolve, reject) => {\n        axios.post(url, body, {\n          headers\n        }).then(response => {\n          const workflowId = response.data.workflows[0].id;\n          resolve(workflowId);\n        }, reject);\n      });\n    });\n  }\n\n  delete(workflowId) {\n    const url = `${this._config.basePath}${replaceVars(WORKFLOW_PATH, [workflowId])}`;\n    return wrapToken(this._config, headers => {\n      return new Promise((resolve, reject) => {\n        axios.delete(url, {\n          headers\n        }).then(response => {\n          const data = response.data;\n          resolve(data);\n        }, reject);\n      });\n    });\n  }\n\n}\n\n;\nmodule.exports = Workflows;","map":{"version":3,"sources":["/Users/ivica/Desktop/dev/face-rec/node_modules/clarifai/src/Workflows.js"],"names":["axios","require","Workflow","API","replaceVars","WORKFLOWS_PATH","WORKFLOW_PATH","wrapToken","isSuccess","Workflows","constructor","_config","rawData","forEach","workflowData","index","length","list","options","page","perPage","url","basePath","headers","Promise","resolve","reject","get","params","per_page","then","response","data","workflows","create","workflowId","config","modelId","modelVersionId","body","id","nodes","model","model_version","post","delete","module","exports"],"mappings":"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","sourcesContent":["let axios = require('axios');\nlet Workflow = require('./Workflow');\nlet {API, replaceVars} = require('./constants');\nlet {WORKFLOWS_PATH, WORKFLOW_PATH,} = API;\nlet {wrapToken,} = require('./utils');\nlet {isSuccess,} = require('./helpers');\n\n/**\n * class representing a collection of workflows\n * @class\n */\nclass Workflows {\n  constructor(_config, rawData = []) {\n    this._config = _config;\n    this.rawData = rawData;\n    rawData.forEach((workflowData, index) => {\n      this[index] = new Workflow(this._config, workflowData);\n    });\n    this.length = rawData.length;\n  }\n\n  /**\n   * Get all workflows in app\n   * @param {Object}    options  Object with keys explained below: (optional)\n   *   @param {Number}    options.page  The page number (optional, default: 1)\n   *   @param {Number}    options.perPage  Number of images to return per page (optional, default: 20)\n   * @return {Promise(Workflows, error)} A Promise that is fulfilled with an instance of Workflows or rejected with an error\n   */\n  list(options = {page: 1, perPage: 20}) {\n    let url = `${this._config.basePath}${WORKFLOWS_PATH}`;\n    return wrapToken(this._config, (headers) => {\n      return new Promise((resolve, reject) => {\n        axios.get(url, {\n          headers,\n          params: {\n            page: options.page,\n            per_page: options.perPage,\n          }\n        }).then((response) => {\n          if (isSuccess(response)) {\n            resolve(new Workflows(this._config, response.data.workflows));\n          } else {\n            reject(response);\n          }\n        }, reject);\n      });\n    });\n  }\n\n  create(workflowId, config) {\n    const url = `${this._config.basePath}${WORKFLOWS_PATH}`;\n    const modelId = config.modelId;\n    const modelVersionId = config.modelVersionId;\n    const body = {\n      workflows: [{\n        id: workflowId,\n        nodes: [{\n          id: 'concepts',\n          model: {\n            id: modelId,\n            model_version: {\n              id: modelVersionId\n            }\n          }\n        }]\n      }]\n    };\n\n    return wrapToken(this._config, (headers) => {\n      return new Promise((resolve, reject) => {\n        axios.post(url, body, {\n          headers\n        }).then(response => {\n          const workflowId = response.data.workflows[0].id;\n          resolve(workflowId);\n        }, reject);\n      });\n    });\n  }\n\n  delete(workflowId) {\n    const url = `${this._config.basePath}${replaceVars(WORKFLOW_PATH, [workflowId])}`;\n    return wrapToken(this._config, (headers) => {\n      return new Promise((resolve, reject) => {\n        axios.delete(url, {\n          headers\n        }).then(response => {\n          const data = response.data;\n          resolve(data);\n        }, reject);\n      });\n    });\n  }\n}\n;\n\nmodule.exports = Workflows;\n"]},"metadata":{},"sourceType":"script"}