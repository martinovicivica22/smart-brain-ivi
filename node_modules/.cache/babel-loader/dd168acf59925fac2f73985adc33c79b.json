{"ast":null,"code":"let axios = require('axios');\n\nlet {\n  checkType\n} = require('./helpers');\n\nlet Models = require('./Models');\n\nlet Inputs = require('./Inputs');\n\nlet Concepts = require('./Concepts');\n\nlet Workflow = require('./Workflow');\n\nlet Workflows = require('./Workflows');\n\nlet Solutions = require('./solutions/Solutions');\n\nlet {\n  API,\n  ERRORS,\n  getBasePath\n} = require('./constants');\n\nlet {\n  TOKEN_PATH\n} = API;\n\nif (typeof window !== 'undefined' && !('Promise' in window)) {\n  window.Promise = require('promise');\n}\n\nif (typeof global !== 'undefined' && !('Promise' in global)) {\n  global.Promise = require('promise');\n}\n/**\n * top-level class that allows access to models, inputs and concepts\n * @class\n */\n\n\nclass App {\n  constructor(arg1, arg2, arg3) {\n    let optionsObj = arg1;\n\n    if (typeof arg1 !== 'object' || arg1 === null) {\n      optionsObj = arg3 || {};\n      optionsObj.clientId = arg1;\n      optionsObj.clientSecret = arg2;\n    }\n\n    this._validate(optionsObj);\n\n    this._init(optionsObj);\n  }\n  /**\n   * Gets a token from the API using client credentials\n   * @return {Promise(token, error)} A Promise that is fulfilled with the token string or rejected with an error\n   *\n   * @deprecated Please switch to using the API key.\n   */\n\n\n  getToken() {\n    return this._config.token();\n  }\n  /**\n   * Sets the token to use for the API\n   * @param {String}         _token    The token you are setting\n   * @return {Boolean}                 true if token has valid fields, false if not\n   *\n   * @deprecated Please switch to using the API key.\n   */\n\n\n  setToken(_token) {\n    let token = _token;\n    let now = new Date().getTime();\n\n    if (typeof _token === 'string') {\n      token = {\n        accessToken: _token,\n        expiresIn: 176400\n      };\n    } else {\n      token = {\n        accessToken: _token.access_token || _token.accessToken,\n        expiresIn: _token.expires_in || _token.expiresIn\n      };\n    }\n\n    if (token.accessToken && token.expiresIn || token.access_token && token.expires_in) {\n      if (!token.expireTime) {\n        token.expireTime = now + token.expiresIn * 1000;\n      }\n\n      this._config._token = token;\n      return true;\n    }\n\n    return false;\n  }\n\n  _validate(_ref) {\n    let {\n      clientId,\n      clientSecret,\n      token,\n      apiKey,\n      sessionToken\n    } = _ref;\n\n    if (clientId || clientSecret) {\n      console.warn('Client ID/secret has been deprecated. Please switch to using the API key. See here how to do ' + 'the switch: https://blog.clarifai.com/introducing-api-keys-a-safer-way-to-authenticate-your-applications');\n    }\n\n    if ((!clientId || !clientSecret) && !token && !apiKey && !sessionToken) {\n      throw ERRORS.paramsRequired(['apiKey']);\n    }\n  }\n\n  _init(options) {\n    let apiEndpoint = options.apiEndpoint || process && process.env && process.env.API_ENDPOINT || 'https://api.clarifai.com';\n    this._config = {\n      apiEndpoint,\n      clientId: options.clientId,\n      clientSecret: options.clientSecret,\n      apiKey: options.apiKey,\n      sessionToken: options.sessionToken,\n      basePath: getBasePath(apiEndpoint, options.userId, options.appId),\n      token: () => {\n        return new Promise((resolve, reject) => {\n          let now = new Date().getTime();\n\n          if (checkType(/Object/, this._config._token) && this._config._token.expireTime > now) {\n            resolve(this._config._token);\n          } else {\n            this._getToken(resolve, reject);\n          }\n        });\n      }\n    };\n\n    if (options.token) {\n      this.setToken(options.token);\n    }\n\n    this.models = new Models(this._config);\n    this.inputs = new Inputs(this._config);\n    this.concepts = new Concepts(this._config);\n    this.workflow = new Workflow(this._config);\n    this.workflows = new Workflows(this._config);\n    this.solutions = new Solutions(this._config);\n  }\n  /**\n   * @deprecated Please switch to using the API key.\n   */\n\n\n  _getToken(resolve, reject) {\n    this._requestToken().then(response => {\n      if (response.status === 200) {\n        this.setToken(response.data);\n        resolve(this._config._token);\n      } else {\n        reject(response);\n      }\n    }, reject);\n  }\n  /**\n   * @deprecated Please switch to using the API key.\n   */\n\n\n  _requestToken() {\n    let url = `${this._config.basePath}${TOKEN_PATH}`;\n    let clientId = this._config.clientId;\n    let clientSecret = this._config.clientSecret;\n    return axios({\n      'url': url,\n      'method': 'POST',\n      'auth': {\n        'username': clientId,\n        'password': clientSecret\n      }\n    });\n  }\n\n}\n\nmodule.exports = App;","map":{"version":3,"sources":["/Users/ivica/Desktop/dev/face-rec/node_modules/clarifai/src/App.js"],"names":["axios","require","checkType","Models","Inputs","Concepts","Workflow","Workflows","Solutions","API","ERRORS","getBasePath","TOKEN_PATH","window","Promise","global","App","constructor","arg1","arg2","arg3","optionsObj","clientId","clientSecret","_validate","_init","getToken","_config","token","setToken","_token","now","Date","getTime","accessToken","expiresIn","access_token","expires_in","expireTime","apiKey","sessionToken","console","warn","paramsRequired","options","apiEndpoint","process","env","API_ENDPOINT","basePath","userId","appId","resolve","reject","_getToken","models","inputs","concepts","workflow","workflows","solutions","_requestToken","then","response","status","data","url","module","exports"],"mappings":"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","sourcesContent":["let axios = require('axios');\nlet {checkType} = require('./helpers');\nlet Models = require('./Models');\nlet Inputs = require('./Inputs');\nlet Concepts = require('./Concepts');\nlet Workflow = require('./Workflow');\nlet Workflows = require('./Workflows');\nlet Solutions = require('./solutions/Solutions');\nlet {API, ERRORS, getBasePath} = require('./constants');\nlet {TOKEN_PATH} = API;\n\nif (typeof window !== 'undefined' && !('Promise' in window)) {\n  window.Promise = require('promise');\n}\n\nif (typeof global !== 'undefined' && !('Promise' in global)) {\n  global.Promise = require('promise');\n}\n\n/**\n * top-level class that allows access to models, inputs and concepts\n * @class\n */\nclass App {\n  constructor(arg1, arg2, arg3) {\n    let optionsObj = arg1;\n    if (typeof arg1 !== 'object' || arg1 === null) {\n      optionsObj = arg3 || {};\n      optionsObj.clientId = arg1;\n      optionsObj.clientSecret = arg2;\n    }\n    this._validate(optionsObj);\n    this._init(optionsObj);\n\n  }\n\n  /**\n   * Gets a token from the API using client credentials\n   * @return {Promise(token, error)} A Promise that is fulfilled with the token string or rejected with an error\n   *\n   * @deprecated Please switch to using the API key.\n   */\n  getToken() {\n    return this._config.token();\n  }\n\n  /**\n   * Sets the token to use for the API\n   * @param {String}         _token    The token you are setting\n   * @return {Boolean}                 true if token has valid fields, false if not\n   *\n   * @deprecated Please switch to using the API key.\n   */\n  setToken(_token) {\n    let token = _token;\n    let now = new Date().getTime();\n    if (typeof _token === 'string') {\n      token = {\n        accessToken: _token,\n        expiresIn: 176400\n      };\n    } else {\n      token = {\n        accessToken: _token.access_token || _token.accessToken,\n        expiresIn: _token.expires_in || _token.expiresIn\n      };\n    }\n    if ((token.accessToken && token.expiresIn) ||\n      (token.access_token && token.expires_in)) {\n      if (!token.expireTime) {\n        token.expireTime = now + (token.expiresIn * 1000);\n      }\n      this._config._token = token;\n      return true;\n    }\n    return false;\n  }\n\n  _validate({clientId, clientSecret, token, apiKey, sessionToken}) {\n    if (clientId || clientSecret) {\n      console.warn('Client ID/secret has been deprecated. Please switch to using the API key. See here how to do ' +\n        'the switch: https://blog.clarifai.com/introducing-api-keys-a-safer-way-to-authenticate-your-applications');\n    }\n    if ((!clientId || !clientSecret) && !token && !apiKey && !sessionToken) {\n      throw ERRORS.paramsRequired(['apiKey']);\n    }\n  }\n\n  _init(options) {\n    let apiEndpoint = options.apiEndpoint ||\n      (process && process.env && process.env.API_ENDPOINT) || 'https://api.clarifai.com';\n    this._config = {\n      apiEndpoint,\n      clientId: options.clientId,\n      clientSecret: options.clientSecret,\n      apiKey: options.apiKey,\n      sessionToken: options.sessionToken,\n      basePath: getBasePath(apiEndpoint, options.userId, options.appId),\n      token: () => {\n        return new Promise((resolve, reject) => {\n          let now = new Date().getTime();\n          if (checkType(/Object/, this._config._token) && this._config._token.expireTime > now) {\n            resolve(this._config._token);\n          } else {\n            this._getToken(resolve, reject);\n          }\n        });\n      }\n    };\n    if (options.token) {\n      this.setToken(options.token);\n    }\n    this.models = new Models(this._config);\n    this.inputs = new Inputs(this._config);\n    this.concepts = new Concepts(this._config);\n    this.workflow = new Workflow(this._config);\n    this.workflows = new Workflows(this._config);\n    this.solutions = new Solutions(this._config);\n  }\n\n  /**\n   * @deprecated Please switch to using the API key.\n   */\n  _getToken(resolve, reject) {\n    this._requestToken().then(\n      (response) => {\n        if (response.status === 200) {\n          this.setToken(response.data);\n          resolve(this._config._token);\n        } else {\n          reject(response);\n        }\n      },\n      reject\n    );\n  }\n\n  /**\n   * @deprecated Please switch to using the API key.\n   */\n  _requestToken() {\n    let url = `${this._config.basePath}${TOKEN_PATH}`;\n    let clientId = this._config.clientId;\n    let clientSecret = this._config.clientSecret;\n    return axios({\n      'url': url,\n      'method': 'POST',\n      'auth': {\n        'username': clientId,\n        'password': clientSecret\n      }\n    });\n  }\n}\n\nmodule.exports = App;\n"]},"metadata":{},"sourceType":"script"}