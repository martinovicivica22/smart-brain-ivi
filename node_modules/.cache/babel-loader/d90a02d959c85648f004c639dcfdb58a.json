{"ast":null,"code":"let axios = require('axios');\n\nlet Input = require('./Input');\n\nlet {\n  API,\n  ERRORS,\n  MAX_BATCH_SIZE,\n  replaceVars\n} = require('./constants');\n\nlet {\n  INPUT_PATH,\n  INPUTS_PATH,\n  INPUTS_STATUS_PATH,\n  SEARCH_PATH,\n  SEARCH_FEEDBACK_PATH\n} = API;\n\nlet {\n  wrapToken,\n  formatInput,\n  formatImagesSearch,\n  formatConceptsSearch\n} = require('./utils');\n\nlet {\n  isSuccess,\n  checkType,\n  clone\n} = require('./helpers');\n/**\n * class representing a collection of inputs\n * @class\n */\n\n\nclass Inputs {\n  constructor(_config) {\n    let rawData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    this.rawData = rawData;\n    rawData.forEach((inputData, index) => {\n      if (inputData.input && inputData.score) {\n        inputData.input.score = inputData.score;\n        inputData = inputData.input;\n      }\n\n      this[index] = new Input(this._config, inputData);\n    });\n    this.length = rawData.length;\n    this._config = _config;\n  }\n  /**\n   * Get all inputs in app\n   * @param {Object}    options  Object with keys explained below: (optional)\n   *   @param {Number}    options.page  The page number (optional, default: 1)\n   *   @param {Number}    options.perPage  Number of images to return per page (optional, default: 20)\n   * @return {Promise(Inputs, error)} A Promise that is fulfilled with an instance of Inputs or rejected with an error\n   */\n\n\n  list() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      page: 1,\n      perPage: 20\n    };\n    let url = `${this._config.basePath}${INPUTS_PATH}`;\n    return wrapToken(this._config, headers => {\n      return new Promise((resolve, reject) => {\n        axios.get(url, {\n          headers,\n          params: {\n            page: options.page,\n            per_page: options.perPage\n          }\n        }).then(response => {\n          if (isSuccess(response)) {\n            resolve(new Inputs(this._config, response.data.inputs));\n          } else {\n            reject(response);\n          }\n        }, reject);\n      });\n    });\n  }\n  /**\n   * Adds an input or multiple inputs\n   * @param {object|object[]}        inputs                                Can be a single media object or an array of media objects (max of 128 inputs/call; passing > 128 will throw an exception)\n   *   @param {object|string}          inputs[].input                        If string, is given, this is assumed to be an image url\n   *     @param {string}                 inputs[].input.(url|base64)           Can be a publicly accessibly url or base64 string representing image bytes (required)\n   *     @param {string}                 inputs[].input.id                     ID of input (optional)\n   *     @param {number[]}               inputs[].input.crop                   An array containing the percent to be cropped from top, left, bottom and right (optional)\n   *     @param {boolean}               inputs[].input.allowDuplicateUrl       Whether to allow duplicate URL\n   *     @param {object[]}               inputs[].input.metadata               Object with key and values pair (value can be string, array or other objects) to attach to the input (optional)\n   *     @param {object}                 inputs[].input.geo                    Object with latitude and longitude coordinates to associate with an input. Can be used in search query as the proximity of an input to a reference point (optional)\n   *       @param {number}                 inputs[].input.geo.latitude           +/- latitude val of geodata\n   *       @param {number}                 inputs[].input.geo.longitude          +/- longitude val of geodata\n   *     @param {object[]}               inputs[].input.concepts               An array of concepts to attach to media object (optional)\n   *       @param {object|string}          inputs[].input.concepts[].concept     If string, is given, this is assumed to be concept id with value equals true\n   *         @param {string}                 inputs[].input.concepts[].concept.id          The concept id (required)\n   *         @param {boolean}                inputs[].input.concepts[].concept.value       Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n   * @return {Promise(Inputs, error)} A Promise that is fulfilled with an instance of Inputs or rejected with an error\n   */\n\n\n  create(inputs) {\n    if (checkType(/(String|Object)/, inputs)) {\n      inputs = [inputs];\n    }\n\n    let url = `${this._config.basePath}${INPUTS_PATH}`;\n\n    if (inputs.length > MAX_BATCH_SIZE) {\n      throw ERRORS.MAX_INPUTS;\n    }\n\n    return wrapToken(this._config, headers => {\n      let data = {\n        inputs: inputs.map(formatInput)\n      };\n      return new Promise((resolve, reject) => {\n        axios.post(url, data, {\n          headers\n        }).then(response => {\n          if (isSuccess(response)) {\n            resolve(new Inputs(this._config, response.data.inputs));\n          } else {\n            reject(response);\n          }\n        }, reject);\n      });\n    });\n  }\n  /**\n   * Get input by id\n   * @param {String}    id  The input id\n   * @return {Promise(Input, error)} A Promise that is fulfilled with an instance of Input or rejected with an error\n   */\n\n\n  get(id) {\n    let url = `${this._config.basePath}${replaceVars(INPUT_PATH, [id])}`;\n    return wrapToken(this._config, headers => {\n      return new Promise((resolve, reject) => {\n        axios.get(url, {\n          headers\n        }).then(response => {\n          if (isSuccess(response)) {\n            resolve(new Input(this._config, response.data.input));\n          } else {\n            reject(response);\n          }\n        }, reject);\n      });\n    });\n  }\n  /**\n   * Delete an input or a list of inputs by id or all inputs if no id is passed\n   * @param {string|string[]}    id           The id of input to delete (optional)\n   * @return {Promise(response, error)} A Promise that is fulfilled with the API response or rejected with an error\n   */\n\n\n  delete() {\n    let id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let val; // delete an input\n\n    if (checkType(/String/, id)) {\n      let url = `${this._config.basePath}${replaceVars(INPUT_PATH, [id])}`;\n      val = wrapToken(this._config, headers => {\n        return axios.delete(url, {\n          headers\n        });\n      });\n    } else {\n      val = this._deleteInputs(id);\n    }\n\n    return val;\n  }\n\n  _deleteInputs() {\n    let id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let url = `${this._config.basePath}${INPUTS_PATH}`;\n    return wrapToken(this._config, headers => {\n      let data = id === null ? {\n        delete_all: true\n      } : {\n        ids: id\n      };\n      return axios({\n        url,\n        method: 'delete',\n        headers,\n        data\n      });\n    });\n  }\n  /**\n   * Merge concepts to inputs in bulk\n   * @param {object[]}         inputs    List of concepts to update (max of 128 inputs/call; passing > 128 will throw an exception)\n   *   @param {object}           inputs[].input\n   *     @param {string}           inputs[].input.id        The id of the input to update\n   *     @param {string}           inputs[].input.concepts  Object with keys explained below:\n   *       @param {object}           inputs[].input.concepts[].concept\n   *         @param {string}           inputs[].input.concepts[].concept.id        The concept id (required)\n   *         @param {boolean}          inputs[].input.concepts[].concept.value     Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n   * @return {Promise(Inputs, error)} A Promise that is fulfilled with an instance of Inputs or rejected with an error\n   */\n\n\n  mergeConcepts(inputs) {\n    inputs.action = 'merge';\n    return this.update(inputs);\n  }\n  /**\n   * Delete concepts to inputs in bulk\n   * @param {object[]}         inputs    List of concepts to update (max of 128 inputs/call; passing > 128 will throw an exception)\n   *   @param {object}           inputs[].input\n   *     @param {string}           inputs[].input.id                           The id of the input to update\n   *     @param {string}           inputs[].input.concepts                     Object with keys explained below:\n   *       @param {object}           inputs[].input.concepts[].concept\n   *         @param {string}           inputs[].input.concepts[].concept.id        The concept id (required)\n   *         @param {boolean}          inputs[].input.concepts[].concept.value     Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n   * @return {Promise(Inputs, error)} A Promise that is fulfilled with an instance of Inputs or rejected with an error\n   */\n\n\n  deleteConcepts(inputs) {\n    inputs.action = 'remove';\n    return this.update(inputs);\n  }\n  /**\n   * Overwrite inputs in bulk\n   * @param {object[]}         inputs    List of concepts to update (max of 128 inputs/call; passing > 128 will throw an exception)\n   *   @param {object}           inputs[].input\n   *     @param {string}           inputs[].input.id                           The id of the input to update\n   *     @param {string}           inputs[].input.concepts                     Object with keys explained below:\n   *       @param {object}           inputs[].input.concepts[].concept\n   *         @param {string}           inputs[].input.concepts[].concept.id        The concept id (required)\n   *         @param {boolean}          inputs[].input.concepts[].concept.value     Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n   * @return {Promise(Inputs, error)} A Promise that is fulfilled with an instance of Inputs or rejected with an error\n   */\n\n\n  overwriteConcepts(inputs) {\n    inputs.action = 'overwrite';\n    return this.update(inputs);\n  }\n  /**\n   * @param {object[]}         inputs    List of inputs to update (max of 128 inputs/call; passing > 128 will throw an exception)\n   *   @param {object}           inputs[].input\n   *     @param {string}           inputs[].input.id                           The id of the input to update\n   *     @param {object}           inputs[].input.metadata                     Object with key values to attach to the input (optional)\n   *     @param {object}           inputs[].input.geo                          Object with latitude and longitude coordinates to associate with an input. Can be used in search query as the proximity of an input to a reference point (optional)\n   *       @param {number}           inputs[].input.geo.latitude                 +/- latitude val of geodata\n   *       @param {number}           inputs[].input.geo.longitude                +/- longitude val of geodata\n   *     @param {string}           inputs[].input.concepts                     Object with keys explained below (optional):\n   *       @param {object}           inputs[].input.concepts[].concept\n   *         @param {string}           inputs[].input.concepts[].concept.id        The concept id (required)\n   *         @param {boolean}          inputs[].input.concepts[].concept.value     Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n   * @return {Promise(Inputs, error)} A Promise that is fulfilled with an instance of Inputs or rejected with an error\n   */\n\n\n  update(inputs) {\n    let url = `${this._config.basePath}${INPUTS_PATH}`;\n    let inputsList = Array.isArray(inputs) ? inputs : [inputs];\n\n    if (inputsList.length > MAX_BATCH_SIZE) {\n      throw ERRORS.MAX_INPUTS;\n    }\n\n    let data = {\n      action: inputs.action,\n      inputs: inputsList.map(input => formatInput(input, false))\n    };\n    return wrapToken(this._config, headers => {\n      return new Promise((resolve, reject) => {\n        axios.patch(url, data, {\n          headers\n        }).then(response => {\n          if (isSuccess(response)) {\n            resolve(new Inputs(this._config, response.data.inputs));\n          } else {\n            reject(response);\n          }\n        }, reject);\n      });\n    });\n  }\n  /**\n   * Search for inputs or outputs based on concepts or images\n   *   @param {object[]}               queries          List of all predictions to match with\n   *     @param {object}                 queries[].concept            An object with the following keys:\n   *       @param {string}                 queries[].concept.id          The concept id\n   *       @param {string}                 queries[].concept.type        Search over 'input' to get input matches to criteria or 'output' to get inputs that are visually similar to the criteria (default: 'output')\n   *       @param {string}                 queries[].concept.name        The concept name\n   *       @param {boolean}                queries[].concept.value       Indicates whether or not the term should match with the prediction returned (default: true)\n   *     @param {object}                 queries[].input              An image object that contains the following keys:\n   *       @param {string}                 queries[].input.id            The input id\n   *       @param {string}                 queries[].input.type          Search over 'input' to get input matches to criteria or 'output' to get inputs that are visually similar to the criteria (default: 'output')\n   *       @param {string}                 queries[].input.(base64|url)  Can be a publicly accessibly url or base64 string representing image bytes (required)\n   *       @param {number[]}               queries[].input.crop          An array containing the percent to be cropped from top, left, bottom and right (optional)\n   *       @param {object}                 queries[].input.metadata      An object with key and value specified by user to refine search with (optional)\n   * @param {Object}                   options       Object with keys explained below: (optional)\n   *    @param {Number}                  options.page          The page number (optional, default: 1)\n   *    @param {Number}                  options.perPage       Number of images to return per page (optional, default: 20)\n   * @return {Promise(response, error)} A Promise that is fulfilled with the API response or rejected with an error\n   */\n\n\n  search() {\n    let queries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      page: 1,\n      perPage: 20\n    };\n    let formattedAnds = [];\n    let url = `${this._config.basePath}${SEARCH_PATH}`;\n    let data = {\n      query: {\n        ands: []\n      },\n      pagination: {\n        page: options.page,\n        per_page: options.perPage\n      }\n    };\n\n    if (!Array.isArray(queries)) {\n      queries = [queries];\n    }\n\n    if (queries.length > 0) {\n      queries.forEach(function (query) {\n        if (query.input) {\n          formattedAnds = formattedAnds.concat(formatImagesSearch(query.input));\n        } else if (query.concept) {\n          formattedAnds = formattedAnds.concat(formatConceptsSearch(query.concept));\n        }\n      });\n      data.query.ands = formattedAnds;\n    }\n\n    return wrapToken(this._config, headers => {\n      return new Promise((resolve, reject) => {\n        axios.post(url, data, {\n          headers\n        }).then(response => {\n          if (isSuccess(response)) {\n            let data = clone(response.data);\n            data.rawData = clone(response.data);\n            resolve(data);\n          } else {\n            reject(response);\n          }\n        }, reject);\n      });\n    });\n  }\n\n  searchFeedback(inputID, searchID, endUserID, sessionID) {\n    let url = `${this._config.basePath}${SEARCH_FEEDBACK_PATH}`;\n    const body = {\n      input: {\n        id: inputID,\n        feedback_info: {\n          event_type: 'search_click',\n          search_id: searchID,\n          end_user_id: endUserID,\n          session_id: sessionID\n        }\n      }\n    };\n    return wrapToken(this._config, headers => {\n      return new Promise((resolve, reject) => {\n        axios.post(url, body, {\n          headers\n        }).then(_ref => {\n          let {\n            data\n          } = _ref;\n          const d = clone(data);\n          d.rawData = clone(data);\n          resolve(d);\n        }, reject);\n      });\n    });\n  }\n  /**\n   * Get inputs status (number of uploaded, in process or failed inputs)\n   * @return {Promise(response, error)} A Promise that is fulfilled with the API response or rejected with an error\n   */\n\n\n  getStatus() {\n    let url = `${this._config.basePath}${INPUTS_STATUS_PATH}`;\n    return wrapToken(this._config, headers => {\n      return new Promise((resolve, reject) => {\n        axios.get(url, {\n          headers\n        }).then(response => {\n          if (isSuccess(response)) {\n            let data = clone(response.data);\n            data.rawData = clone(response.data);\n            resolve(data);\n          } else {\n            reject(response);\n          }\n        }, reject);\n      });\n    });\n  }\n\n}\n\n;\nmodule.exports = Inputs;","map":{"version":3,"sources":["/Users/ivica/Desktop/dev/face-rec/node_modules/clarifai/src/Inputs.js"],"names":["axios","require","Input","API","ERRORS","MAX_BATCH_SIZE","replaceVars","INPUT_PATH","INPUTS_PATH","INPUTS_STATUS_PATH","SEARCH_PATH","SEARCH_FEEDBACK_PATH","wrapToken","formatInput","formatImagesSearch","formatConceptsSearch","isSuccess","checkType","clone","Inputs","constructor","_config","rawData","forEach","inputData","index","input","score","length","list","options","page","perPage","url","basePath","headers","Promise","resolve","reject","get","params","per_page","then","response","data","inputs","create","MAX_INPUTS","map","post","id","delete","val","_deleteInputs","delete_all","ids","method","mergeConcepts","action","update","deleteConcepts","overwriteConcepts","inputsList","Array","isArray","patch","search","queries","formattedAnds","query","ands","pagination","concat","concept","searchFeedback","inputID","searchID","endUserID","sessionID","body","feedback_info","event_type","search_id","end_user_id","session_id","d","getStatus","module","exports"],"mappings":"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","sourcesContent":["let axios = require('axios');\nlet Input = require('./Input');\nlet {API, ERRORS, MAX_BATCH_SIZE, replaceVars} = require('./constants');\nlet {INPUT_PATH, INPUTS_PATH, INPUTS_STATUS_PATH, SEARCH_PATH, SEARCH_FEEDBACK_PATH} = API;\nlet {wrapToken, formatInput, formatImagesSearch, formatConceptsSearch} = require('./utils');\nlet {isSuccess, checkType, clone} = require('./helpers');\n\n/**\n * class representing a collection of inputs\n * @class\n */\nclass Inputs {\n  constructor(_config, rawData = []) {\n    this.rawData = rawData;\n    rawData.forEach((inputData, index) => {\n      if (inputData.input && inputData.score) {\n        inputData.input.score = inputData.score;\n        inputData = inputData.input;\n      }\n      this[index] = new Input(this._config, inputData);\n    });\n    this.length = rawData.length;\n    this._config = _config;\n  }\n\n  /**\n   * Get all inputs in app\n   * @param {Object}    options  Object with keys explained below: (optional)\n   *   @param {Number}    options.page  The page number (optional, default: 1)\n   *   @param {Number}    options.perPage  Number of images to return per page (optional, default: 20)\n   * @return {Promise(Inputs, error)} A Promise that is fulfilled with an instance of Inputs or rejected with an error\n   */\n  list(options = {page: 1, perPage: 20}) {\n    let url = `${this._config.basePath}${INPUTS_PATH}`;\n    return wrapToken(this._config, (headers) => {\n      return new Promise((resolve, reject) => {\n        axios.get(url, {\n          headers,\n          params: {\n            page: options.page,\n            per_page: options.perPage,\n          }\n        }).then((response) => {\n          if (isSuccess(response)) {\n            resolve(new Inputs(this._config, response.data.inputs));\n          } else {\n            reject(response);\n          }\n        }, reject);\n      });\n    });\n  }\n\n  /**\n   * Adds an input or multiple inputs\n   * @param {object|object[]}        inputs                                Can be a single media object or an array of media objects (max of 128 inputs/call; passing > 128 will throw an exception)\n   *   @param {object|string}          inputs[].input                        If string, is given, this is assumed to be an image url\n   *     @param {string}                 inputs[].input.(url|base64)           Can be a publicly accessibly url or base64 string representing image bytes (required)\n   *     @param {string}                 inputs[].input.id                     ID of input (optional)\n   *     @param {number[]}               inputs[].input.crop                   An array containing the percent to be cropped from top, left, bottom and right (optional)\n   *     @param {boolean}               inputs[].input.allowDuplicateUrl       Whether to allow duplicate URL\n   *     @param {object[]}               inputs[].input.metadata               Object with key and values pair (value can be string, array or other objects) to attach to the input (optional)\n   *     @param {object}                 inputs[].input.geo                    Object with latitude and longitude coordinates to associate with an input. Can be used in search query as the proximity of an input to a reference point (optional)\n   *       @param {number}                 inputs[].input.geo.latitude           +/- latitude val of geodata\n   *       @param {number}                 inputs[].input.geo.longitude          +/- longitude val of geodata\n   *     @param {object[]}               inputs[].input.concepts               An array of concepts to attach to media object (optional)\n   *       @param {object|string}          inputs[].input.concepts[].concept     If string, is given, this is assumed to be concept id with value equals true\n   *         @param {string}                 inputs[].input.concepts[].concept.id          The concept id (required)\n   *         @param {boolean}                inputs[].input.concepts[].concept.value       Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n   * @return {Promise(Inputs, error)} A Promise that is fulfilled with an instance of Inputs or rejected with an error\n   */\n  create(inputs) {\n    if (checkType(/(String|Object)/, inputs)) {\n      inputs = [inputs];\n    }\n    let url = `${this._config.basePath}${INPUTS_PATH}`;\n    if (inputs.length > MAX_BATCH_SIZE) {\n      throw ERRORS.MAX_INPUTS;\n    }\n    return wrapToken(this._config, (headers) => {\n      let data = {\n        inputs: inputs.map(formatInput)\n      };\n      return new Promise((resolve, reject) => {\n        axios.post(url, data, {headers})\n          .then((response) => {\n            if (isSuccess(response)) {\n              resolve(new Inputs(this._config, response.data.inputs));\n            } else {\n              reject(response);\n            }\n          }, reject);\n      });\n    });\n  }\n\n  /**\n   * Get input by id\n   * @param {String}    id  The input id\n   * @return {Promise(Input, error)} A Promise that is fulfilled with an instance of Input or rejected with an error\n   */\n  get(id) {\n    let url = `${this._config.basePath}${replaceVars(INPUT_PATH, [id])}`;\n    return wrapToken(this._config, (headers) => {\n      return new Promise((resolve, reject) => {\n        axios.get(url, {headers}).then((response) => {\n          if (isSuccess(response)) {\n            resolve(new Input(this._config, response.data.input));\n          } else {\n            reject(response);\n          }\n        }, reject);\n      });\n    });\n  }\n\n  /**\n   * Delete an input or a list of inputs by id or all inputs if no id is passed\n   * @param {string|string[]}    id           The id of input to delete (optional)\n   * @return {Promise(response, error)} A Promise that is fulfilled with the API response or rejected with an error\n   */\n  delete(id = null) {\n    let val;\n    // delete an input\n    if (checkType(/String/, id)) {\n      let url = `${this._config.basePath}${replaceVars(INPUT_PATH, [id])}`;\n      val = wrapToken(this._config, (headers) => {\n        return axios.delete(url, {headers});\n      });\n    } else {\n      val = this._deleteInputs(id);\n    }\n    return val;\n  }\n\n  _deleteInputs(id = null) {\n    let url = `${this._config.basePath}${INPUTS_PATH}`;\n    return wrapToken(this._config, (headers) => {\n      let data = id === null ? {delete_all: true} :\n        {ids: id};\n      return axios({\n        url,\n        method: 'delete',\n        headers,\n        data\n      });\n    });\n  }\n\n  /**\n   * Merge concepts to inputs in bulk\n   * @param {object[]}         inputs    List of concepts to update (max of 128 inputs/call; passing > 128 will throw an exception)\n   *   @param {object}           inputs[].input\n   *     @param {string}           inputs[].input.id        The id of the input to update\n   *     @param {string}           inputs[].input.concepts  Object with keys explained below:\n   *       @param {object}           inputs[].input.concepts[].concept\n   *         @param {string}           inputs[].input.concepts[].concept.id        The concept id (required)\n   *         @param {boolean}          inputs[].input.concepts[].concept.value     Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n   * @return {Promise(Inputs, error)} A Promise that is fulfilled with an instance of Inputs or rejected with an error\n   */\n  mergeConcepts(inputs) {\n    inputs.action = 'merge';\n    return this.update(inputs);\n  }\n\n  /**\n   * Delete concepts to inputs in bulk\n   * @param {object[]}         inputs    List of concepts to update (max of 128 inputs/call; passing > 128 will throw an exception)\n   *   @param {object}           inputs[].input\n   *     @param {string}           inputs[].input.id                           The id of the input to update\n   *     @param {string}           inputs[].input.concepts                     Object with keys explained below:\n   *       @param {object}           inputs[].input.concepts[].concept\n   *         @param {string}           inputs[].input.concepts[].concept.id        The concept id (required)\n   *         @param {boolean}          inputs[].input.concepts[].concept.value     Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n   * @return {Promise(Inputs, error)} A Promise that is fulfilled with an instance of Inputs or rejected with an error\n   */\n  deleteConcepts(inputs) {\n    inputs.action = 'remove';\n    return this.update(inputs);\n  }\n\n  /**\n   * Overwrite inputs in bulk\n   * @param {object[]}         inputs    List of concepts to update (max of 128 inputs/call; passing > 128 will throw an exception)\n   *   @param {object}           inputs[].input\n   *     @param {string}           inputs[].input.id                           The id of the input to update\n   *     @param {string}           inputs[].input.concepts                     Object with keys explained below:\n   *       @param {object}           inputs[].input.concepts[].concept\n   *         @param {string}           inputs[].input.concepts[].concept.id        The concept id (required)\n   *         @param {boolean}          inputs[].input.concepts[].concept.value     Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n   * @return {Promise(Inputs, error)} A Promise that is fulfilled with an instance of Inputs or rejected with an error\n   */\n  overwriteConcepts(inputs) {\n    inputs.action = 'overwrite';\n    return this.update(inputs);\n  }\n\n  /**\n   * @param {object[]}         inputs    List of inputs to update (max of 128 inputs/call; passing > 128 will throw an exception)\n   *   @param {object}           inputs[].input\n   *     @param {string}           inputs[].input.id                           The id of the input to update\n   *     @param {object}           inputs[].input.metadata                     Object with key values to attach to the input (optional)\n   *     @param {object}           inputs[].input.geo                          Object with latitude and longitude coordinates to associate with an input. Can be used in search query as the proximity of an input to a reference point (optional)\n   *       @param {number}           inputs[].input.geo.latitude                 +/- latitude val of geodata\n   *       @param {number}           inputs[].input.geo.longitude                +/- longitude val of geodata\n   *     @param {string}           inputs[].input.concepts                     Object with keys explained below (optional):\n   *       @param {object}           inputs[].input.concepts[].concept\n   *         @param {string}           inputs[].input.concepts[].concept.id        The concept id (required)\n   *         @param {boolean}          inputs[].input.concepts[].concept.value     Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n   * @return {Promise(Inputs, error)} A Promise that is fulfilled with an instance of Inputs or rejected with an error\n   */\n  update(inputs) {\n    let url = `${this._config.basePath}${INPUTS_PATH}`;\n    let inputsList = Array.isArray(inputs) ? inputs : [inputs];\n    if (inputsList.length > MAX_BATCH_SIZE) {\n      throw ERRORS.MAX_INPUTS;\n    }\n    let data = {\n      action: inputs.action,\n      inputs: inputsList.map((input) => formatInput(input, false))\n    };\n    return wrapToken(this._config, (headers) => {\n      return new Promise((resolve, reject) => {\n        axios.patch(url, data, {headers})\n          .then((response) => {\n            if (isSuccess(response)) {\n              resolve(new Inputs(this._config, response.data.inputs));\n            } else {\n              reject(response);\n            }\n          }, reject);\n      });\n    });\n  }\n\n  /**\n   * Search for inputs or outputs based on concepts or images\n   *   @param {object[]}               queries          List of all predictions to match with\n   *     @param {object}                 queries[].concept            An object with the following keys:\n   *       @param {string}                 queries[].concept.id          The concept id\n   *       @param {string}                 queries[].concept.type        Search over 'input' to get input matches to criteria or 'output' to get inputs that are visually similar to the criteria (default: 'output')\n   *       @param {string}                 queries[].concept.name        The concept name\n   *       @param {boolean}                queries[].concept.value       Indicates whether or not the term should match with the prediction returned (default: true)\n   *     @param {object}                 queries[].input              An image object that contains the following keys:\n   *       @param {string}                 queries[].input.id            The input id\n   *       @param {string}                 queries[].input.type          Search over 'input' to get input matches to criteria or 'output' to get inputs that are visually similar to the criteria (default: 'output')\n   *       @param {string}                 queries[].input.(base64|url)  Can be a publicly accessibly url or base64 string representing image bytes (required)\n   *       @param {number[]}               queries[].input.crop          An array containing the percent to be cropped from top, left, bottom and right (optional)\n   *       @param {object}                 queries[].input.metadata      An object with key and value specified by user to refine search with (optional)\n   * @param {Object}                   options       Object with keys explained below: (optional)\n   *    @param {Number}                  options.page          The page number (optional, default: 1)\n   *    @param {Number}                  options.perPage       Number of images to return per page (optional, default: 20)\n   * @return {Promise(response, error)} A Promise that is fulfilled with the API response or rejected with an error\n   */\n  search(queries = [], options = {page: 1, perPage: 20}) {\n    let formattedAnds = [];\n    let url = `${this._config.basePath}${SEARCH_PATH}`;\n    let data = {\n      query: {\n        ands: []\n      },\n      pagination: {\n        page: options.page,\n        per_page: options.perPage\n      }\n    };\n\n    if (!Array.isArray(queries)) {\n      queries = [queries];\n    }\n    if (queries.length > 0) {\n      queries.forEach(function(query) {\n        if (query.input) {\n          formattedAnds = formattedAnds.concat(formatImagesSearch(query.input));\n        } else if (query.concept) {\n          formattedAnds = formattedAnds.concat(formatConceptsSearch(query.concept));\n        }\n      });\n      data.query.ands = formattedAnds;\n    }\n    return wrapToken(this._config, (headers) => {\n      return new Promise((resolve, reject) => {\n        axios.post(url, data, {headers})\n          .then((response) => {\n            if (isSuccess(response)) {\n              let data = clone(response.data);\n              data.rawData = clone(response.data);\n              resolve(data);\n            } else {\n              reject(response);\n            }\n          }, reject);\n      });\n    });\n  }\n\n  searchFeedback(inputID, searchID, endUserID, sessionID) {\n    let url = `${this._config.basePath}${SEARCH_FEEDBACK_PATH}`;\n    const body = {\n      input: {\n        id: inputID,\n        feedback_info: {\n          event_type: 'search_click',\n          search_id: searchID,\n          end_user_id: endUserID,\n          session_id: sessionID\n        }\n      }\n    };\n    return wrapToken(this._config, headers => {\n      return new Promise((resolve, reject) => {\n        axios.post(url, body, {\n          headers\n        }).then(({data}) => {\n          const d = clone(data);\n          d.rawData = clone(data);\n          resolve(d);\n        }, reject);\n      });\n    });\n  }\n\n  /**\n   * Get inputs status (number of uploaded, in process or failed inputs)\n   * @return {Promise(response, error)} A Promise that is fulfilled with the API response or rejected with an error\n   */\n  getStatus() {\n    let url = `${this._config.basePath}${INPUTS_STATUS_PATH}`;\n    return wrapToken(this._config, (headers) => {\n      return new Promise((resolve, reject) => {\n        axios.get(url, {headers})\n          .then((response) => {\n            if (isSuccess(response)) {\n              let data = clone(response.data);\n              data.rawData = clone(response.data);\n              resolve(data);\n            } else {\n              reject(response);\n            }\n          }, reject);\n      });\n    });\n  }\n}\n;\n\nmodule.exports = Inputs;\n"]},"metadata":{},"sourceType":"script"}